/*
	(c) 2014 by Pablo Alonso Esparza. All rights reserved.

	*/
	QUnit.module("Unit Testing framework check");
	test("QUnit check", function () {
		ok(1 == "1", "Test passed! (But we didn't actually test anything of EncJson)");
	});
	QUnit.module("JSON Tests");
	test("EncJSON setpassword, encrypt and decrypt with test data 1", function (assert) {
		encjson.setpassword('stevenseagal', 1);
		var enc= encjson.encryptjson(testData1);
		var dec= encjson.decryptjson(enc);
		assert.deepEqual(testData1, dec, "Pass! - JSON encrypted and decrypted correctly test data 1");
	});
	test("EncJSON setpassword, encrypt and decrypt with test data 2", function (assert) {
		encjson.setpassword('chucknorris', 1);
		var enc= encjson.encryptjson(testData2);
		var dec= encjson.decryptjson(enc);		
		assert.deepEqual(testData2, dec, "Pass! - JSON encrypted and decrypted correctly test data 2");
	});	test("EncJSON setpassword, encrypt and decrypt with test data 3 (array of data)", function (assert) {		encjson.setpassword('budspencer', 1);		var enc= encjson.encryptjson(testData3);		var dec= encjson.decryptjson(enc);			assert.deepEqual(testData3, dec, "Pass! - JSON encrypted and decrypted correctly test data 3");	});	test("EncJSON setpassword, encrypt and decrypt with test data 4 (with null values)", function (assert) {		encjson.setpassword('jcvd', 1);		var enc= encjson.encryptjson(testData4);		var dec= encjson.decryptjson(enc);				assert.deepEqual(testData4, dec, "Pass! - JSON encrypted and decrypted correctly test data 4");			});	test("EncJSON setpassword, encrypt and decrypt with test data 5 ", function (assert) {		encjson.setpassword('gurus', 1);		var enc= encjson.encryptjson(testData5);		var dec= encjson.decryptjson(enc);		assert.deepEqual(testData5, dec, "Pass! - JSON encrypted and decrypted correctly test data 5");			});	QUnit.module("Passwords Tests");	test("EncJSON setpassword with default iterations (1000)", function (assert) {		encjson.setpassword('stallone');		var enc= encjson.encryptjson(testData0);		var dec= encjson.decryptjson(enc);		assert.deepEqual(testData0, dec, "Pass! - JSON encrypted and decrypted correctly test data 0");	});	test("EncJSON setpassword with 1200 iterations", function (assert) {		encjson.setpassword('stallone', 1200);		var enc= encjson.encryptjson(testData0);		var dec= encjson.decryptjson(enc);		assert.deepEqual(testData0, dec, "Pass! - JSON encrypted and decrypted correctly test data 0");	});	test("EncJSON set random password", function (assert) {		encjson.setrandompassword();		var enc= encjson.encryptjson(testData0);		var dec= encjson.decryptjson(enc);		assert.deepEqual(testData0, dec, "Pass! - JSON encrypted and decrypted correctly test data 0");	});	test("EncJSON set raw password (without derivation function)", function (assert) {		encjson.setrawpassword("lolailo");		var enc= encjson.encryptjson(testData0);		var dec= encjson.decryptjson(enc);		assert.deepEqual(testData0, dec, "Pass! - JSON encrypted and decrypted correctly test data 0");	});	QUnit.module("Individual properties or values encryption");	test("Individual properties encryption and decryption", function (assert) {		encjson.setpassword('chuck', 1);		var dec=[];		var enc=[];		var aux=testData6['properties'];		for (var i=0; i < aux.length; i++) {			enc[i]= encjson.encryptproperty(aux[i]);		}		for (var i=0; i < enc.length; i++) {			dec[i]= encjson.decryptproperty(enc[i]);		}				assert.deepEqual(aux, dec, "Pass! - JSON encrypted and decrypted correctly test data 6");	});	test("Individual values encryption and decryption", function (assert) {		encjson.setpassword('chuck', 1);		var dec=[];		var enc=[];		var aux=testData6['values'];		for (var i=0; i < aux.length; i++) {			enc[i]= encjson.encryptvalue(aux[i]);		}		for (var i=0; i < enc.length; i++) {			dec[i]= encjson.decryptvalue(enc[i]);		}				assert.deepEqual(aux, dec, "Pass! - JSON encrypted and decrypted correctly test data 6");	});	QUnit.module("Exceptions");	test("Password not set encryptjson", function() { 		throws(			function() {				var aux;				encjson.setrawpassword(aux);				encjson.encryptjson(testData0);			},			function(error) {				return error.message === "A password needs to be set before calling this function";			}		);	});	test("Password not set decryptjson", function() { 		throws(			function() {				var aux;				encjson.setrawpassword(aux);				encjson.decryptjson(testData0);			},			function(error) {				return error.message === "A password needs to be set before calling this function";			}		);	});
